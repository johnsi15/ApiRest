<script type="text/babel">
  /*
  // Esto lo hacemos con vanilla js revisar.
  // http://vanilla-js.com/
  let productList = document.createElement('ul');

  // Indicamos que vamos a usar el headers y lo que vamos a mandar
  const myHeaders = new Headers();
  // Entonces endicamos que al headers authorization le vamos agregar el token, 
  // Por defecto se envia authorization: Barer por eso lo hacemos de esa forma con el Barer
  myHeaders.append('authorization', 'Barer '+localStorage.token);

  // fetch es la nueva forma de ES6
  fetch('/api/product', {
    methos: 'GET',
    headers: myHeaders
  })
  .then(res => res.json())
  .then(data => {
    // console.log(data);
    data.products.map(product => {
      let text = document.createTextNode(product.name);
      let elem = document.createElement('li');
      let src = product.picture;

      let imagen = document.createElement('img');
      imagen.src= src;

      elem.appendChild(text);// Agregamos el text como hijo del li
      elem.appendChild(imagen);

      productList.appendChild(elem);// Agregamos el li como hijo del ul
    })

    document.body.appendChild(productList);
  })*/

  // Ejemplo con react 

  

  class Products extends React.Component{

    constructor(props){
      super(props);
      this.state = { 
        products: [] 
      };
    }

    componentWillMount() {
      // Indicamos que vamos a usar el headers y lo que vamos a mandar
      const myHeaders = new Headers();
      // Entonces endicamos que al headers authorization le vamos agregar el token, 
      // Por defecto se envia authorization: Barer por eso lo hacemos de esa forma con el Barer
      myHeaders.append('authorization', 'Barer '+localStorage.token);
      
      // fetch es la nueva forma de ES6
      fetch('/api/product', {
        methos: 'GET',
        headers: myHeaders
      })
      .then(res => res.json())
      .then(data => {
        {{!-- console.log(data); --}}
        this.setState({ products: data.products })
      })
    }

    render() {
      if (this.state.products.length > 0) {
        return (
          <ProductList list={ this.state.products }/>
        )
      } else {
        return <p className="text-center">Cargando productos...</p>
      }
    }
  }

  const ProductList = ({ list }) => {
    const product =  list.map((product, index) => {
             return <Product key={ index } name={ product.name } picture={ product.picture }/>
          });
    return (
      <ul>
        { product }
      </ul>
    );
  }

  const Product = ({ name, picture }) => {
    return (
      <li>
        <h2>{ name }</h2>
        <img src={ picture } alt={ picture } /> 
      </li>
    );
  }

  const Container = () => {
    return(
      <div className="lista">
        <Products />
      </div>
    );
  }

  ReactDOM.render(
    <Container />,
    document.getElementById('app')
  )
</script>